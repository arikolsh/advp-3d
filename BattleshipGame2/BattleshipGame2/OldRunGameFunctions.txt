void GameManager::runGame()
{

	vector<vector<pair<int, int>>> schedule = getAllRoundsSchedule();
	for (auto boardNum = 0; boardNum < _boards.size(); boardNum++)
	{		//------- board rounds -------//
			/*
			* holds all the possible pairs of players for a match.
			* permMatrix[i][j]=1 i and j already played
			* against each other. for every i permMatrix[i][i] = 1 in advance because
			* player_i cannot play againset himself.
			*/
		int curRound = 0;
		while (curRound < schedule.size())
		{	//------- one board round -------//

			vector<pair<int, int>> pairs = schedule[curRound]; //get next pairs for round and update carriedPlayer
			vector<thread> activeThreads;
			int curPairIndex = 0;
			while (curPairIndex < pairs.size()) //still pending tasks
			{ //------- round -------//

				while (activeThreads.size() < _maxThreads && curPairIndex < pairs.size())
				{
					pair<int, int> currentPair = pairs[curPairIndex++];
					if (currentPair.first == -1 || currentPair.second == -1)
					{
						continue;
					} //skip the player that didnt have a pair
					activeThreads.push_back(thread(&GameManager::runMatch, this, currentPair, boardNum));
				}
				for (auto i = 0; i < activeThreads.size(); i++)
				{ //wait for matches to finish
					if (activeThreads[i].joinable())
						activeThreads.at(i).join();
				}
				activeThreads.clear(); // clear threads buffer
			}
			printResultsForPlayers(); // Print current match results
			curRound++;
		}
	}
	printResultsForPlayers(); // Print Final results
}



void GameManager::printResultsForPlayers()
{
	ostringstream stream;
	stream << left << setfill(' ') << setw(5) << "#" << setw(_maxNameLength + 5) << "Player Name"
		<< setw(20) << "Total Wins" << setw(20) << "Total Losses" << setw(10) << "%" << setw(15)
		<< "Pts For" << setw(15) << "Pts Against" << endl;
	stream << setfill('-') << setw(115) << "-" << endl << setfill(' ');
	vector<PlayerResult> sortedResults(_playerResults.begin(), _playerResults.end());
	sort(sortedResults.begin(), sortedResults.end(), PlayerResult::cmd);
	for (int i = 0; i < sortedResults.size(); i++)
	{
		stream << setw(5) << to_string(i + 1).append(".")
			<< setw(_maxNameLength + 5) << _playerNames[sortedResults[i]._playerNum]
			<< setw(20) << sortedResults[i]._totalNumWins
			<< setw(20) << sortedResults[i]._totalNumLosses
			<< setw(10) << setprecision(2) << fixed << sortedResults[i].getWinPercentage()
			<< setw(15) << sortedResults[i]._totalNumPointsFor
			<< setw(15) << sortedResults[i]._totalNumPointsAgainst << endl;
	}
	cout << stream.str() << endl;
	//_logger->log(stream.str());
}